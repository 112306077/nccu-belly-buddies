// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String?
  imageUri  String?
  role      String
  status    String
  posts     Post[]
}

model Post {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  slug          String   @unique
  title         String
  content       String
  excerpt       String
  featuredImage String?
  status        String
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String   @db.ObjectId
  seo           Seo      @relation(fields: [seoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seoId         String   @unique @db.ObjectId

  tags           Tag[]         @relation(fields: [tagIDs], references: [id])
  tagIDs         String[]      @db.ObjectId
  categories     Category[]    @relation(fields: [categoryIDs], references: [id])
  categoryIDs    String[]      @db.ObjectId
  subCategories  SubCategory[] @relation(fields: [subCategoryIDs], references: [id])
  subCategoryIDs String[]      @db.ObjectId
}

model Seo {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String?
  description   String?
  autoGenerated Boolean
  route         String?
  Post          Post?
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  posts         Post[]        @relation(fields: [postIDs], references: [id])
  postIDs       String[]      @db.ObjectId
  subCategories SubCategory[]
}

model SubCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String   @db.ObjectId
  posts      Post[]   @relation(fields: [postIDs], references: [id])
  postIDs    String[] @db.ObjectId
}

model Tag {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  postIDs String[] @db.ObjectId
  posts   Post[]   @relation(fields: [postIDs], references: [id])
}
