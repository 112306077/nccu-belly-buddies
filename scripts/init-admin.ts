import 'dotenv/config'
import { drizzle } from 'drizzle-orm/node-postgres'
import * as readline from 'readline'
import * as schema from '../app/lib/db/schema'

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
})

function isEmailValid(email: string): boolean {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
}

const askEmail = (): Promise<string> => {
    return new Promise(resolve => {
        rl.question(
            '\n請輸入管理員電子郵件地址 (Please enter Admin Email) (按下 ^+C 以關閉) (Press ^+C to exit): ',
            email => {
                if (!isEmailValid(email)) {
                    console.error(
                        '❌ 無效的電子郵件格式，請重新輸入。(Invalid email, try again.)'
                    )
                    return resolve(askEmail())
                }
                resolve(email)
            }
        )
    })
}

async function checkAndCreateAdmin() {
    const email = await askEmail()

    const db = drizzle(process.env.DATABASE_URL!, { schema })

    try {
        // Check if admin exists
        const admin = await db.query.usersTable.findFirst({
            where: (t, { eq }) => eq(t.role, 'ADMIN'),
        })

        if (!admin) {
            console.log(
                '管理員不存在，正在建立... (Admin does not exist. Creating...)'
            )

            // Create admin user and papa SEO
            const [newAdmin] = await db.transaction(async tx => {
                await tx.insert(schema.seosTable).values({
                    route: '/',
                    metaTitle: 'Papa',
                    metaDescription:
                        'Papa - A simple and thorough platform for modern web app.',
                    autoGenerated: true,
                })

                // TODO: Create default Post, its SEO, and tag / category

                return await tx
                    .insert(schema.usersTable)
                    .values({
                        email,
                        role: 'ADMIN',
                        status: 'ACTIVE',
                    })
                    .returning()
            })

            console.log('\n已建立管理員 (Admin created):', newAdmin)
            console.warn(
                `\n* * * \n管理員使用者已建立！請使用 ${newAdmin.email} 登入。您現在可以使用 npm run dev 啟動程式。\n* * *\n`
            )
            console.warn(
                `\n* * * \nAdmin user created! Sign in with ${newAdmin.email}. Now, enter "npm run dev" to start the project.\n* * *\n`
            )
        } else {
            console.log(
                `管理員 ${admin.email} 已存在。Admin ${admin.email} already exists.\n`
            )
        }
    } catch (error) {
        console.error(
            '檢查/建立管理員使用者時發生錯誤 (Error checking/creating admin user):',
            error
        )
    } finally {
        console.log('\n* * *\n歡迎使用 Papa 🥔✨\n* * *\n')
        console.log('\n* * *\nWelcome to Papa 🥔✨\n* * *\n')
        process.exit(0)
    }
}

await checkAndCreateAdmin()
